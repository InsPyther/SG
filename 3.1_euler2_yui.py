from functools import reduce

# Заповнити код приведених нижче функцій. Функція main() вже
# налаштована для виклику функцій з декількома різними
# параметрами, і виводить 'OK' у випадку, якщо виклик функції
# коректний.
# Початковий код кожної функції містить 'return'
# і є просто заготовкою для вашого коду.



# A. Різниця між сумою квадратів і квадратом суми
# Сума квадратів перших десяти натуральних чисел
# 1**2 + 2**2 + ... + 10**2 = 385
# Квадрат суми перших десяти натуральних чисел
# (1 + 2 + ... + 10)**2 = 55**2 = 3025
# Значить, різниця між сумою квадратів і квадратом суми перших
# десяти натуральних чисел складає 3025 - 385 = 2640.
# Знайдіть різницю між сумою квадратів і квадратом суми перших 
# сто натуральних чисел.
# Вирішіть задачу двома способами: за допомогою map і lambda 
# і за допомогою генератора списку. 
def diff():
    # +++ ваш код +++
    sum_of_squares = sum([n **2 for n in range(1,101)])                # генератор
    sum_of_squares_alt = sum(list(map(lambda x: x**2, range(1,101))))  # map+lambda
    square_of_sum = (sum(range(1,101))**2)
    return square_of_sum - sum_of_squares                              # вирішення впринципі можна записати
                                                                       # і в одну стрічку, але так читабельніше


# B. Найбільший добуток п’яти послідовних цифр
# Знайдіть найбільший добуток п’яти послідовних цифр в 
# 1000-значному числі.

# перетворено в список із натуральних чисел
lst = list(map(int, list(str(731671765313306249192251196744265747423553491949349698352031277450632623957831801698480186947885184385861560789112949495459501737958331952853208805511125406987471585238630507156932909632952274430435576689664895044524452316173185640309871112172238311362229893423380308135336276614282806444486645238749303589072962904915604407723907138105158593079608667017242712188399879790879227492190169972088809377665727333001053367881220235421809751254540594752243525849077116705560136048395864467063244157221553978216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450))))

def max_five():
    # +++ ваш код +++
    # кожне число-елемент перетворено у список, що крім нього включає наступні 4 числа-елементи
    lst2 = [lst[n:n + 5] for n in range(0, len(lst)) if len(lst[n:n + 5]) == 5]
    # отримую добутки кожної підстрічки через reduce і вивожу максимальне число
    return max([reduce(lambda x,y: x*y, n) for n in lst2])


# C. Сума цифр числа 2**1000
# 2**15 = 32768, сума цифр 3 + 2 + 7 + 6 + 8 = 26.
# Яка сума цифр числа 2**1000?
def summm():
    # +++ ваш код +++
    return sum(list(map(int, list(str(2 ** 1000)))))


# D. Сума цифр в числі 100!
# n! означає n * (n-1) * ... * 3 * 2 * 1
# Знайдіть суму цифр в числі 100!
def factorial():
    # +++ ваш код +++

    return sum(list(map(int, list(str(reduce(lambda x,y:x*y, range(1,101)))))))



# Проста функція test() використовується в main() для виведення
# порівняння того, що повертається з функції з тим, що вона повинна повертати.

def test(got, expected):
    if got == expected:
        prefix = ' OK '
    else:
        prefix = '  X '
    print('%s Отримано: %s | Очікувалося: %s' % (prefix, repr(got), repr(expected)))



# Викликає фунції вище з тестовими параметрами.
def main():
    print('A. Різниця між сумою квадратів і квадратом суми?')
    test(diff(), 25164150)

    print()
    print("B. Найбільший добуток п’яти послідовних цифр")
    test(max_five(), 40824)

    print()
    print('C. Сума цифр числа 2**1000')
    test(summm(), 1366)

    print()
    print('D. Сума цифр в числі 100!')
    test(factorial(), 648)

if __name__ == '__main__':
    main()
