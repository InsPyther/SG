""" "Кількість слів"

Функція main() нижче вже визначена і заповнена. Вона викликає функції 
print_words() і print_top(), які вам потрібно заповнити.

1. Якщо при виклику файлу задано прапорець --count, викликається функція 
print_words(filename), яка підраховує, як часто кожне слово зустрічається 
в тексті і виводить:
слово1 кількість1
слово2 кількість2
...

Виведений список відсортуйте за алфавітом. Зберігайте всі слова 
в нижньому регістрі, тобто слова "Слон" і "слон" будуть оброблятися як одне 
слово.

2. Якщо задано прапорець --topcount, викликається функція print_top(filename),
яка аналогічна функції print_words(), але виводить тільки топ-20 слів, які 
найбільш часто зустрічаються, таким чином першим буде слово, яке саме частіше
зустрічається, за ним наступне за частотою і т.д.

Використовуйте str.split() (без аргументів), щоб розбити текст на слова.

Відсікайте знаки пунктуації за допомогою str.strip() з знаками пунктуації 
в якості аргументу.

Не пишіть всю програму відразу. Доведіть її до якогось проміжного 
стану і виведіть вашу поточну структуру даних. Коли все буде працювати 
як потрібно, перейдіть до наступного етапу.

Визначіть додаткову функцію, щоб уникнути дублювання 
коду в середині print_words() і print_top().

"""

import sys

# +++ваш код+++
# Визначте і заповніть функції print_words(filename) і print_top(filename).
# Ви також можете написати додаткову функцію, яка читає файл,
# будує за ним словник слово/кількість і повертає цей словник.
# Потім print_words() і print_top() зможуть просто викликати цю допоміжну функцію.


def create_dict(filename):
    ''' Ця функція читає файл, будує за ним словник слово/кількість і повертає цей словник. 
    Всі слова перед виконанням операцій із словником переводяться у нижній регістр, пунктуація усувається'''
    f = open(filename, "r", encoding='utf-8')   # для запуску з командної строки Windows використовував 'cp866'
    text = f.read()         
    text = text.lower()   
    words = text.split() 
    word_dict = {}
    for word in words:                                     # Даний цикл бере кожне слово, очищує його і додає у словник як ключ із присвоєнням значення.
        word = word.strip('!"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~')
        if len(word)>3:                                    # Додав мінімальну довжину, тому що додавало пробіли і зв'язки ("і", "на", "але" і т.д.)
            word_dict[word] = word_dict.get(word, 0) + 1   # Даний код додає ключ у словник зі значенням "1", якщо його там немає, а якщо є, то оновлює значення для ключа на "+1". Слово-ключ потрапляє сюди очищеним від пунктуації (54), тому підрахунок іде повністю вірно
    return word_dict
    f.close()


def print_words(filename):
    ''' Дана функція підраховує, як часто кожне слово зустрічається 
в тексті файлу і виводить ці дані у алфавітному порядку. 
Вона викликає допоміжну функцію create_dict() для підготовки вхідних даних для себе. '''
    word_dict = create_dict(filename)  
    # перетворення ключів у список і сортування (по алфавіту)
    dict_keys = word_dict.keys()
    key_list = list(dict_keys)
    key_list.sort()
    # власне вивід
    for key in key_list:      
        print(key, word_dict[key])

def print_top(filename):
    ''' Дана функція виводить топ-20 слів, які 
найбільш часто зустрічаються. 
Вона викликає допоміжну функцію create_dict() для підготовки вхідних даних для себе.'''
    word_dict = create_dict(filename) 
    # розпаковка і сортування словника
    dict_items = word_dict.items()
    item_list = list(dict_items)                     # [(key1,value1), (key2,value2)...]
    top = sorted(item_list, key=lambda values: values[-1], reverse=True)
    # вивід топ-20 слів
    count = 0
    for key,value in top:         
        if count < 20:      
            print(key, value)
            count += 1

# Це базовий код для розбору аргументів командної стрічки.
# Він викликає print_words() і print_top(), які необхідно визначити.
def main():
    if len(sys.argv) != 3:
        print('usage: python wordcount.py {--count | --topcount} file')
        sys.exit(1)

    option = sys.argv[1]
    filename = sys.argv[2]
    if option == '--count':
        print_words(filename)
    elif option == '--topcount':
        print_top(filename)
    else:
        print('unknown option: ' + option)
    sys.exit(1)

if __name__ == '__main__':
    main()
